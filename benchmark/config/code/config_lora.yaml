model_name: "/datanfs4/chenrongyi/models/Llama-3.1-8B-Instruct"  #  /datanfs2/chenrongyi/models/llama-3.1-8b-instruct  /datanfs2/chenrongyi/hf/hub/models--mistralai--Mistral-7B-Instruct-v0.2/snapshots/3ad372fc79158a2148299e3318516c786aeded6c
tokenizer_name: "/datanfs4/chenrongyi/models/Llama-3.1-8B-Instruct" #不用担心该对象的准确性，因为已经被loraTrainUtils.py中的load_base_model函数自动设置为model_name
loraadaptor_save_path_base: "/datanfs4/chenrongyi/models/loraadaptors/"
target_modules: ["up_proj", "down_proj", "gate_proj"] #'up_proj','down_proj','gate_proj','k_proj','v_proj','q_proj','out_proj'
target_layers: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]
r: 64
alpha: 128
batch_size: 4
target_batch_size: 32
num_epochs: 4
learning_rate: 1e-6
dropout: 0.05
precision: "bf16" # fp16,fp32,bf16
codeParrotMixNumber: 0
santa_dataset_path: "/datanfs2/chenrongyi/data/santacoder-fim-task/data/train-00000-of-00001-b6ec1fdd66018baa.parquet"
device_map: "auto"
knowledge_type: "docstring"
# save_path_base: "/datanfs2/chenrongyi/models/versiBCB"
num_models: 1
model_weights: [1]
traindata_percentage: 0.1
# 根据
model_source: "huggingface" # modelscope or huggingface
# prediction settings
dataset: "versiBCB" # versicode or versiBCB
task: "vace" # vace or vscc
removeDeprecationData: false # 是否ban deprecation
test_prompt: "Hello, how are you?"


# prediction prompt settings
enable_description: true
description_instruct_format: true # 是否使用instruct_prompt作为description
code_start: true # 是否使用code_prompt作为code_start，让模型进行后续输出，如"import xxx def taskfunc(param):"
granularity: "token" # 选择预测的粒度，line或token
# save
# loraadaptor_save_path_base: "/datanfs2/chenrongyi/models/loraadaptors/"

versicode_vscc_prompt: |
  You are now a professional Python programming engineer. I will also provide you with a functional description and specific dependency package version.
  Your task is to write Python code that implements the described functionality using the specified dependency package and version.

  Please only return the implementation code without any explanations.
  ### Functionality description:
  {description}
  ### Dependency and version:
  {dependency}=={version}
  ###code:

versicode_vace_prompt: |
  You are now a professional Python programming engineer. I will provide you with a code snippet and a description of its functionality, including the dependencies and versions used in the code. Then, I will provide the same dependencies but with a specified new version. Your task is to refactor the code using the methods provided by the specified new version and return the refactored code.
  Important Notes:

  . 1.If you encounter ambiguities or uncertainties due to missing external knowledge, clearly state any assumptions you are making to proceed with the refactoring.
  2. Your goal is to produce functional and optimized code that aligns with the new version of the dependencies, 

  Please only return the refactored code.

  ### Functionality description of the code
  {description}
  ### Dependency and old version
  {dependency}=={origin_version}
  ### Old version code
  {origin_code}
  ### Dependency and new version
  {dependency}=={target_version}

  ### Refactored new code

versiBCB_vscc_prompt: |
  You are now a professional Python programming engineer. I will also provide you with a functional description and specific dependency package version.
  Your task is to write Python code that implements the described functionality using the specified dependency package and version.

  Please only return the implementation code without any explanations. 
  ### Functionality description
  {description}
  ### Dependency 
  {dependency}
  ### code to achieve described functionality

versiBCB_vace_prompt: |
  You are now a professional Python programming engineer. I will provide you with a code snippet and a description of its functionality, including the dependencies and versions used in the code. Then, I will provide the same dependencies but with a specified new version. Your task is to refactor the code using the methods provided by the specified new version and return the refactored code.
  Important Notes:

  . 1.If you encounter ambiguities or uncertainties due to missing external knowledge, clearly state any assumptions you are making to proceed with the refactoring.
  2. Your goal is to produce functional and optimized code that aligns with the new version of the dependencies. 3.Please only return the refactored code.

  ### Functionality description of the code
  {description}
  ### origin_dependency
  {origin_dependency}
  ### Old version code
  {origin_code}
  ### target Dependency
  {target_dependency}

  ### Refactored new code


versiBCB_vscc_BD_prompt: |
  You are now a professional Python programming engineer. I will also provide you with a functional description and specific dependency package version.
  Your task is to write Python code that implements the described functionality using the specified dependency package and version.In the code, it is not allowed to use deprecated API

  Please only return the implementation code without any explanations. 
  ### Functionality description
  {description}
  ### Dependency 
  {dependency}
  ### code

versiBCB_vace_BD_prompt: |
  You are now a professional Python programming engineer. I will provide you with a code snippet and a description of its functionality, including the dependencies and versions used in the code. Then, I will provide the same dependencies but with a specified new version. Your task is to refactor the code using the methods provided by the specified new version and return the refactored code.
  Important Notes:

  . 1.If you encounter ambiguities or uncertainties due to missing external knowledge, clearly state any assumptions you are making to proceed with the refactoring.
  2. Your goal is to produce functional and optimized code that aligns with the new version of the dependencies. 3.It is not allowed to use deprecated APIs 4.Please only return the refactored code.

  ### Functionality description of the code
  {description}
  ### origin_dependency
  {origin_dependency}
  ### Old version code
  {origin_code}
  ### target Dependency
  {target_dependency}

  ### Refactored new code


versiBCB_vace_prompt_instruct: |
  Instruction:You are now a professional Python programming engineer. I will provide you with a code snippet and a description of its functionality, including the dependencies and versions used in the code. Then, I will provide the same dependencies but with a specified new version. Your task is to refactor the code using the methods provided by the specified new version and return the refactored code.
  Important Notes:

  . 1.If you encounter ambiguities or uncertainties due to missing external knowledge, clearly state any assumptions you are making to proceed with the refactoring.
  2. Your goal is to produce functional and optimized code that aligns with the new version of the dependencies. 3.Please only return the refactored code.

  ### Functionality description of the code
  {description}
  ### origin_dependency
  {origin_dependency}
  ### Old version code
  {origin_code}
  ### target Dependency
  {target_dependency}

  response: